datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                     String             @id @default(cuid())
  name                   String?
  email                  String?            @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  verificationToken      VerificationToken? @relation(fields: [verificationTokenToken], references: [token])
  roles                  Role[]
  accounts               Account[]
  sessions               Session[]
  verificationTokenToken String?
  UserSettings           UserSettings?
  UserHistory            UserHistory?

  @@index([verificationTokenToken])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  TELLER
  CUSTOMER
  EMPLOYEE
  MANAGER
  OWNER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  User       User[]

  @@unique([identifier, token])
}

model UserSettings {
  id         String @id @default(cuid())
  userId     String
  currency   String
  language   String
  timezone   String
  dateFormat String
  timeFormat String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserHistory {
  id        String   @id @default(cuid())
  userId    String
  action    String
  createdAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id          String @id @default(cuid())
  name        String
  price       Int
  quantity    Int
  description String

  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Order       Order?     @relation(fields: [orderId], references: [id])
  orderId     String?
  Cart        Cart?      @relation(fields: [cartId], references: [id])
  cartId      String?
  Transaksi   Transaksi? @relation(fields: [transaksiId], references: [id])
  transaksiId String?
  BukuBesar   BukuBesar? @relation(fields: [bukuBesarId], references: [id])
  bukuBesarId String?

  @@index([orderId])
  @@index([cartId])
  @@index([transaksiId])
  @@index([bukuBesarId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cart {
  id          String    @id @default(cuid())
  userId      String
  totalAmount Int
  totalItems  Int
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Anggota     Anggota?  @relation(fields: [anggotaId], references: [id])
  anggotaId   String?

  @@index([anggotaId])
}

model Order {
  id          String     @id @default(cuid())
  userId      String
  orderDate   DateTime
  totalAmount Int
  totalItems  Int
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Transaksi   Transaksi? @relation(fields: [transaksiId], references: [id])
  transaksiId String?
  Anggota     Anggota?   @relation(fields: [anggotaId], references: [id])
  anggotaId   String?
  Credit      Credit?    @relation(fields: [creditId], references: [id])
  creditId    String?

  @@index([transaksiId])
  @@index([anggotaId])
  @@index([creditId])
}

model BukuBesar {
  id                    String   @id @default(cuid())
  userId                String
  transaksiDate         DateTime
  totalAmount           Int
  totalItems            Int
  totalHutang           Int
  totalPiutang          Int
  totalPenjualan        Int
  totalPembelian        Int
  totalReturPenjualan   Int
  totalReturPembelian   Int
  totalPendapatan       Int
  totalPengeluaran      Int
  totalModal            Int
  totalLaba             Int
  totalRugi             Int
  totalKeuntungan       Int
  totalKeuntunganBersih Int
  totalSaldo            Int
  totalSaldoBersih      Int

  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Transaksi   Transaksi? @relation(fields: [transaksiId], references: [id])
  transaksiId String?
  Anggota     Anggota?   @relation(fields: [anggotaId], references: [id])
  anggotaId   String?

  @@index([transaksiId])
  @@index([anggotaId])
}

model Transaksi {
  id             String   @id @default(cuid())
  userId         String
  transaksiDate  DateTime
  totalAmount    Int
  totalItems     Int
  jenisTransaksi String
  itemsJenis     String

  Order     Order[]
  BukuBesar BukuBesar[]
  products  Product[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Anggota   Anggota?    @relation(fields: [anggotaId], references: [id])
  anggotaId String?
  Credit    Credit[]
  Simpanan  Simpanan[]

  @@index([anggotaId])
}

model Anggota {
  id          String      @id @default(cuid())
  name        String
  address     String
  phoneNumber String
  email       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  BukuBesar   BukuBesar[]
  Transaksi   Transaksi[]
  Order       Order[]

  Cart     Cart[]
  Credit   Credit[]
  Simpanan Simpanan[]
}

model Credit {
  id          String   @id @default(cuid())
  amount      Int
  description String
  kegunaan    String
  bunga       Int
  tenor       Int
  jatuhTempo  DateTime
  totalBayar  Int

  Order       Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Anggota     Anggota?   @relation(fields: [anggotaId], references: [id])
  anggotaId   String?
  Transaksi   Transaksi? @relation(fields: [transaksiId], references: [id])
  transaksiId String?

  @@index([anggotaId])
  @@index([transaksiId])
}

model Simpanan {
  id          String     @id @default(cuid())
  name        String
  amount      Int
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Anggota     Anggota?   @relation(fields: [anggotaId], references: [id])
  anggotaId   String?
  Transaksi   Transaksi? @relation(fields: [transaksiId], references: [id])
  transaksiId String?

  @@index([anggotaId])
  @@index([transaksiId])
}
